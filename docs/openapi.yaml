openapi: 3.0.3
info:
  title: Kokokah.com LMS API
  description: |
    Comprehensive Learning Management System API for Kokokah.com
    
    ## Features
    - Complete course management
    - User authentication and authorization
    - Payment processing with multiple gateways
    - AI-powered recommendations
    - Real-time chat support
    - Progress tracking and analytics
    - Certificate generation
    - Badge system and gamification
    
    ## Authentication
    This API uses Bearer token authentication via Laravel Sanctum.
    Include the token in the Authorization header: `Bearer {token}`
    
  version: 1.0.0
  contact:
    name: Kokokah API Support
    email: api-support@kokokah.com
    url: https://docs.kokokah.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.kokokah.com/api
    description: Production server
  - url: https://staging-api.kokokah.com/api
    description: Staging server
  - url: http://localhost:8000/api
    description: Development server

security:
  - bearerAuth: []

paths:
  /register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Create a new user account
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - first_name
                - last_name
                - email
                - password
                - password_confirmation
              properties:
                first_name:
                  type: string
                  example: John
                last_name:
                  type: string
                  example: Doe
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  minLength: 8
                  example: password123
                password_confirmation:
                  type: string
                  format: password
                  example: password123
                role:
                  type: string
                  enum: [student, instructor]
                  default: student
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '422':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'

  /login:
    post:
      tags:
        - Authentication
      summary: Login user
      description: Authenticate user and return access token
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: john@example.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /user:
    get:
      tags:
        - Authentication
      summary: Get current user
      description: Get the authenticated user's information
      responses:
        '200':
          description: User information
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/User'

  /logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Revoke the current access token
      responses:
        '200':
          description: Logout successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /courses:
    get:
      tags:
        - Courses
      summary: Get all courses
      description: Retrieve a paginated list of courses with optional filtering
      security: []
      parameters:
        - name: page
          in: query
          description: Page number
          schema:
            type: integer
            minimum: 1
            default: 1
        - name: per_page
          in: query
          description: Items per page
          schema:
            type: integer
            minimum: 1
            maximum: 50
            default: 15
        - name: category_id
          in: query
          description: Filter by category ID
          schema:
            type: integer
        - name: level_id
          in: query
          description: Filter by academic level ID
          schema:
            type: integer
        - name: difficulty
          in: query
          description: Filter by difficulty level
          schema:
            type: string
            enum: [beginner, intermediate, advanced]
        - name: search
          in: query
          description: Search in title and description
          schema:
            type: string
        - name: price_min
          in: query
          description: Minimum price filter
          schema:
            type: number
            format: decimal
        - name: price_max
          in: query
          description: Maximum price filter
          schema:
            type: number
            format: decimal
      responses:
        '200':
          description: List of courses
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/Course'
                      meta:
                        $ref: '#/components/schemas/PaginationMeta'

    post:
      tags:
        - Courses
      summary: Create a new course
      description: Create a new course (Instructor/Admin only)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseInput'
      responses:
        '201':
          description: Course created successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Course'
        '403':
          description: Insufficient permissions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

  /courses/{id}:
    get:
      tags:
        - Courses
      summary: Get a single course
      description: Retrieve detailed information about a specific course
      security: []
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: integer
      responses:
        '200':
          description: Course details
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/CourseDetailed'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'

    put:
      tags:
        - Courses
      summary: Update a course
      description: Update course information (Instructor/Admin only)
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CourseInput'
      responses:
        '200':
          description: Course updated successfully
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Course'

    delete:
      tags:
        - Courses
      summary: Delete a course
      description: Delete a course (Instructor/Admin only)
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: integer
      responses:
        '200':
          description: Course deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'

  /courses/{id}/enroll:
    post:
      tags:
        - Courses
      summary: Enroll in a course
      description: Enroll the authenticated user in a course
      parameters:
        - name: id
          in: path
          required: true
          description: Course ID
          schema:
            type: integer
      responses:
        '201':
          description: Enrollment successful
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/SuccessResponse'
                  - type: object
                    properties:
                      data:
                        $ref: '#/components/schemas/Enrollment'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
        message:
          type: string
          example: "Operation completed successfully"

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string
          example: "Error description"
        error:
          type: string
          example: "Detailed error message"
        code:
          type: string
          example: "ERROR_CODE"

    ValidationError:
      allOf:
        - $ref: '#/components/schemas/ErrorResponse'
        - type: object
          properties:
            errors:
              type: object
              additionalProperties:
                type: array
                items:
                  type: string

    PaginationMeta:
      type: object
      properties:
        pagination:
          type: object
          properties:
            current_page:
              type: integer
              example: 1
            total_pages:
              type: integer
              example: 10
            per_page:
              type: integer
              example: 15
            total:
              type: integer
              example: 150

    AuthResponse:
      allOf:
        - $ref: '#/components/schemas/SuccessResponse'
        - type: object
          properties:
            data:
              type: object
              properties:
                user:
                  $ref: '#/components/schemas/User'
                token:
                  type: string
                  example: "1|abc123def456..."

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        first_name:
          type: string
          example: "John"
        last_name:
          type: string
          example: "Doe"
        email:
          type: string
          format: email
          example: "john@example.com"
        role:
          type: string
          enum: [student, instructor, admin]
          example: "student"
        is_active:
          type: boolean
          example: true
        email_verified_at:
          type: string
          format: date-time
          nullable: true
          example: "2025-01-01T00:00:00.000000Z"
        created_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"

    Course:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Introduction to Mathematics"
        description:
          type: string
          example: "Learn basic mathematical concepts"
        category_id:
          type: integer
          example: 1
        instructor_id:
          type: integer
          example: 2
        term_id:
          type: integer
          example: 1
        level_id:
          type: integer
          example: 1
        price:
          type: string
          example: "99.99"
        status:
          type: string
          enum: [draft, published, archived]
          example: "published"
        difficulty:
          type: string
          enum: [beginner, intermediate, advanced]
          example: "beginner"
        duration_hours:
          type: integer
          example: 40
        max_students:
          type: integer
          example: 100
        published_at:
          type: string
          format: date-time
          nullable: true
          example: "2025-01-01T00:00:00.000000Z"
        created_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"

    CourseDetailed:
      allOf:
        - $ref: '#/components/schemas/Course'
        - type: object
          properties:
            category:
              $ref: '#/components/schemas/Category'
            instructor:
              $ref: '#/components/schemas/User'
            lessons_count:
              type: integer
              example: 12
            students_count:
              type: integer
              example: 45
            average_rating:
              type: number
              format: decimal
              example: 4.5
            reviews_count:
              type: integer
              example: 23

    CourseInput:
      type: object
      required:
        - title
        - description
        - category_id
        - price
        - difficulty
      properties:
        title:
          type: string
          example: "Introduction to Mathematics"
        description:
          type: string
          example: "Learn basic mathematical concepts"
        category_id:
          type: integer
          example: 1
        term_id:
          type: integer
          example: 1
        level_id:
          type: integer
          example: 1
        price:
          type: number
          format: decimal
          example: 99.99
        difficulty:
          type: string
          enum: [beginner, intermediate, advanced]
          example: "beginner"
        duration_hours:
          type: integer
          example: 40
        max_students:
          type: integer
          example: 100

    Category:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: "Mathematics"
        description:
          type: string
          example: "Mathematical subjects and topics"
        created_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"

    Enrollment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        course_id:
          type: integer
          example: 1
        progress:
          type: integer
          minimum: 0
          maximum: 100
          example: 65
        status:
          type: string
          enum: [active, completed, dropped]
          example: "active"
        enrolled_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"
        completed_at:
          type: string
          format: date-time
          nullable: true
          example: null
        created_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"

    Lesson:
      type: object
      properties:
        id:
          type: integer
          example: 1
        course_id:
          type: integer
          example: 1
        title:
          type: string
          example: "Lesson 1: Introduction"
        content:
          type: string
          example: "Lesson content here..."
        video_url:
          type: string
          format: uri
          nullable: true
          example: "https://youtube.com/watch?v=abc123"
        duration_minutes:
          type: integer
          example: 30
        order:
          type: integer
          example: 1
        is_free:
          type: boolean
          example: false
        created_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"
        updated_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"

    Quiz:
      type: object
      properties:
        id:
          type: integer
          example: 1
        lesson_id:
          type: integer
          example: 1
        title:
          type: string
          example: "Lesson 1 Quiz"
        type:
          type: string
          enum: [multiple_choice, true_false, essay]
          example: "multiple_choice"
        time_limit_minutes:
          type: integer
          nullable: true
          example: 30
        max_attempts:
          type: integer
          example: 3
        passing_score:
          type: integer
          example: 70
        shuffle_questions:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"

    Payment:
      type: object
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        course_id:
          type: integer
          nullable: true
          example: 1
        amount:
          type: string
          example: "99.99"
        currency:
          type: string
          example: "NGN"
        gateway:
          type: string
          enum: [paystack, flutterwave, stripe, paypal]
          example: "paystack"
        gateway_reference:
          type: string
          example: "ref_abc123"
        type:
          type: string
          enum: [course_purchase, wallet_deposit]
          example: "course_purchase"
        status:
          type: string
          enum: [pending, completed, failed, cancelled]
          example: "completed"
        completed_at:
          type: string
          format: date-time
          nullable: true
          example: "2025-01-01T00:00:00.000000Z"
        created_at:
          type: string
          format: date-time
          example: "2025-01-01T00:00:00.000000Z"
